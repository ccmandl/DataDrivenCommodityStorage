model DDA_LDR
uses "mmxprs", "mmsheet"; 

parameters
ID=1
end-parameters


setparam("XPRS_MIPRELSTOP",1e-15)
setparam("XPRS_MAXTIME",1000)

declarations
	
!Sets
T: set of integer 
N: set of integer

!Parameters
p:			array(T) of real		
p_i: 		array(T) of real 		
p_o: 		array(T) of real		
C: 			real					
Tmax: 		integer 				
Tmin: 		integer 				
Nmax: 		integer					
InitInv: 	real					
c_h: 		real					
G_i: 		real					
G_o: 		real					
c_i:		real					
c_o:		real					
eta_i:		real					
eta_o:		real					
X:			array(N,T) of real		
lambda: 	real					

!Decision Variables
s_i: 	array(T) of mpvar			
s_o: 	array(T) of mpvar			
Inv:	array(T) of mpvar			
beta_i:	array(N) of mpvar			
beta_o: array(N) of mpvar			
w_o: array(N) of mpvar 				

!Solution Values
sol_s_i: 	array(T) of real
sol_s_o: 	array(T) of real
sol_I:		array(T) of real
sol_beta_i:	array(N) of real
sol_beta_o:	array(N) of real
objValue: 	real
Profit:		real
end-declarations

initializations from !Database
Tmin as !...
Tmax as !...
Nmax as !...
end-initializations

initializations from !Database
T as !...
p as !...
N as !...
C as !...
G_i as !...
G_o as !...
InitInv as !...
c_h as !...
c_i as !...
c_o as !...
eta_i as !...
eta_o as !...
X as !...
lambda as !...
end-initializations

!Friction adjustment
forall(t in T)do
p_i(t):=1/eta_i * p(t) + c_i
p_o(t):=eta_o * p(t) - c_o
end-do

!Initialize Arrays
forall(t in T) create(s_i(t))
forall(t in T) create(s_o(t))
forall(t in T) create(Inv(t))
forall(i in N) create(beta_i(i))
forall(i in N) create(beta_o(i))

!Constraints
forall(t in Tmin..Tmax|t<Tmax)
Inv(t+1)=Inv(t)-s_o(t)+s_i(t)
Inv(Tmin)=InitInv


forall(t in T) do
s_o(t)<=Inv(t)
s_o(t) <= G_o
s_o(t)>=0
end-do

forall(t in T) do
s_i(t) <= C - Inv(t) + s_o(t)
s_i(t) <= G_i
s_i(t)>=0
end-do

forall(t in T,i in N)do
s_i(t) is_free
s_o(t) is_free
Inv(t) is_free
beta_i(i) is_free
beta_o(i) is_free
end-do

forall(t in T) do
s_i(t)=sum(i in N)beta_i(i)*X(i,t)
s_o(t)=sum(i in N)beta_o(i)*X(i,t)
end-do

forall(i in N)
indicator(-1, w_i(i), beta_i(i) <= 0)		
forall(i in N)
indicator(-1, w_i(i), beta_i(i) >= 0)		
forall(i in N)
indicator(-1, w_o(i), beta_o(i) <= 0)		
forall(i in N)
indicator(-1, w_o(i), beta_o(i) >= 0)		

forall(i in N)do
w_i(i) is_binary
w_o(i) is_binary
end-do

!Objective
maximize (1/(Tmax-Tmin+1)*(sum(t in T)(p_o(t)*s_o(t)-p_i(t)*s_i(t)-c_h*Inv(t)))-lambda*(sum(i in 2..Nmax)w_i(i)+sum(i in 2..Nmax)w_o(i)))  

!Write to Excel
forall(t in T) sol_s_i(t) := getsol(s_i(t))
forall(t in T) sol_s_o(t) := getsol(s_o(t))
forall(t in T) sol_Inv(t) := getsol(Inv(t))
forall(i in N) sol_beta_i(i) := getsol(beta_i(i))
forall(i in N) sol_beta_o(i) := getsol(beta_o(i))

objValue := getobjval

Profit := getsol(1/(Tmax-Tmin+1)*(sum(t in T)(p_o(t)*s_o(t)-p_i(t)*s_i(t)-c_h*Inv(t))))

initializations to !Database
Profit as !...
sol_Inv as !...
sol_s_i as !...
sol_s_o as !...
sol_beta_i as !...
sol_beta_o as !...
end-initializations

end-model