model DDA_LDR
uses "mmxprs", "mmsheet"; 

parameters
ID=1
end-parameters


setparam("XPRS_MIPRELSTOP",1e-15)
setparam("XPRS_MAXTIME",1000)

declarations
	
!Sets
T: set of integer 
N: set of integer

!Parameters
p:			array(T) of real		
p_i: 		array(T) of real 		
p_o: 		array(T) of real		
C: 			real					
Tmax: 		integer 				
Tmin: 		integer 				
Nmax: 		integer					
InitInv: 	real					
c_h: 		real					
G_i: 		real					
G_o: 		real					
c_i:		real					
c_o:		real					
eta_i:		real					
eta_o:		real					
X:			array(N,T) of real		
lambda: 	real					

!Decision Variables
s_i: 	array(T) of mpvar			
s_o: 	array(T) of mpvar			
Inv:	array(T) of mpvar			
beta_i:	array(N) of mpvar			
beta_o: array(N) of mpvar			
w_o: array(N) of mpvar 				

!Solution Values
sol_s_i: 	array(T) of real
sol_s_o: 	array(T) of real
sol_I:		array(T) of real
sol_beta_i:	array(N) of real
sol_beta_o:	array(N) of real
objValue: 	real
Profit:		real
end-declarations

initializations from !Database
Tmin as !...
Tmax as !...
Nmax as !...
end-initializations

initializations from !Database
T as !...
p as !...
N as !...
C as !...
G_i as !...
G_o as !...
InitInv as !...
c_h as !...
c_i as !...
c_o as !...
eta_i as !...
eta_o as !...
X as !...
lambda as !...
end-initializations

!Friction adjustment
forall(t in T)do
p_i(t):=1/eta_i * p(t) + c_i
p_o(t):=eta_o * p(t) - c_o
end-do

!Initialize Arrays
forall(t in T) create(s_i(t))
forall(t in T) create(s_o(t))
forall(t in T) create(Inv(t))
forall(i in N) create(beta_i(i))
forall(i in N) create(beta_o(i))

!Constraints
forall(t in Tmin..Tmax|t<Tmax)
Inv(t+1)=Inv(t)-s_o(t)+s_i(t)
Inv(Tmin)=InitInv


forall(t in T) do
s_o(t)<=Inv(t)
s_o(t) <= G_o
s_o(t)>=0
end-do

forall(t in T) do
s_i(t) <= C - Inv(t) + s_o(t)
s_i(t) <= G_i
s_i(t)>=0
end-do

forall(t in T,i in N)do
s_i(t) is_free
s_o(t) is_free
Inv(t) is_free
beta_i(i) is_free
beta_o(i) is_free
end-do

forall(t in T) do
s_i(t)=sum(i in N)beta_i(i)*X(i,t)
s_o(t)=sum(i in N)beta_o(i)*X(i,t)
end-do

forall(i in N)
indicator(-1, w_i(i), beta_i(i) <= 0)		
forall(i in N)
indicator(-1, w_i(i), beta_i(i) >= 0)		
forall(i in N)
indicator(-1, w_o(i), beta_o(i) <= 0)		
forall(i in N)
indicator(-1, w_o(i), beta_o(i) >= 0)		

forall(i in N)do
w_i(i) is_binary
w_o(i) is_binary
end-do

!Objective
maximize (1/(Tmax-Tmin+1)*(sum(t in T)(p_o(t)*s_o(t)-p_i(t)*s_i(t)-c_h*Inv(t)))-lambda*(sum(i in 2..Nmax)w_i(i)+sum(i in 2..Nmax)w_o(i)))  

!Write to Excel
forall(t in T) sol_s_i(t) := getsol(s_i(t))
forall(t in T) sol_s_o(t) := getsol(s_o(t))
forall(t in T) sol_Inv(t) := getsol(Inv(t))
forall(i in N) sol_beta_i(i) := getsol(beta_i(i))
forall(i in N) sol_beta_o(i) := getsol(beta_o(i))

objValue := getobjval

Profit := getsol(1/(Tmax-Tmin+1)*(sum(t in T)(p_o(t)*s_o(t)-p_i(t)*s_i(t)-c_h*Inv(t))))

initializations to !Database
Profit as !...
sol_Inv as !...
sol_s_i as !...
sol_s_o as !...
sol_beta_i as !...
sol_beta_o as !...
end-initializations

end-model


model DDA_OSP
uses "mmxprs", "mmsheet"; 

parameters
ID=1
end-parameters


setparam("XPRS_MIPRELSTOP",1e-15)
setparam("XPRS_MAXTIME",1000)

declarations
	
!Sets
T: set of integer 
Toverall: set of integer							
Tforward: set of integer							

!Parameters
Tmax: 		integer 								
TmaxForward:integer									
Tmin: 		integer 								
p:			array(T) of real						
p_i: 		array(T) of real 						
f:			array(Tforward) of real					
f_i:		array(Tforward) of real					
f_o:		array(Tforward) of real					
C: 			real									
Nmax: 		integer									
InitInv: 	real									
c_h: 		real									
G_i: 		real									
G_o: 		real									
c_i:		real									
c_o:		real									
eta_i:		real									
eta_o:		real									
X:			array(N,Toverall) of real				
lambda: 	real									

!Decision Variables
s_i: 		array(Toverall) of mpvar				
s_o: 		array(Toverall) of mpvar				
Inv:		array(Toverall) of mpvar				
beta:		array(N) of mpvar						
P:			array(Toverall) of mpvar				
q:	 		array(Toverall) of mpvar				
r:	 		array(Toverall) of mpvar				
w: 			array(N) of mpvar 						


!Constraint Labels
ct1a: array(Toverall) of logctr
ct1b: array(Toverall) of logctr
ct1c: array(Toverall) of logctr
ct1d: array(Toverall) of logctr
ct2a: array(Toverall) of logctr
ct2b: array(Toverall) of logctr
ct2c: array(Toverall) of logctr
ct2d: array(Toverall) of logctr

!Solution Values
sol_s_i: 	array(Toverall) of real
sol_s_o: 	array(Toverall) of real
sol_I:		array(Toverall) of real
sol_q:		array(Toverall) of real
sol_r:		array(Toverall) of real
sol_beta:	array(N) of real
sol_P:		array(Toverall) of real
objValue: 	real
Profit:		real
end-declarations

initializations from !Database
Tmin as !...
Tmax as !...
Nmax as !...
end-initializations

TmaxForward:=Tmax+6	
Tforward:=Tmax+1..TmaxForward

initializations from !Database
T as !...
Toverall as !...
p as !...
f as !...
N as !...
G_i as !...
G_o as !...
InitInv as !...
c_h as !...
c_i as !...	
c_o as !...
eta_i as !...	
eta_o as !...
X as !...
lambda as !... 	
end-initializations

!Friction adjustment
forall(t in T)do
p_i(t):=1/eta_i * p(t) + c_i
p_o(t):=eta_o * p(t) - c_o
end-do
forall(t in Tmax+1..TmaxForward)do
f_i(t):=1/eta_i * f(t) + c_i
f_o(t):=eta_o * f(t) - c_o
end-do 

!Initialize Arrays
forall(t in Toverall) create(s_i(t))
forall(t in Toverall) create(s_o(t))
forall(t in Toverall) create(Inv(t))
forall(i in N) 		  create(beta(i))
forall(t in Toverall) create(q(t))
forall(t in Toverall) create(r(t))

!Constraints
forall(t in Tmin..TmaxForward|t<TmaxForward)
Inv(t+1)=Inv(t)-s_o(t)+s_i(t)
Inv(Tmin)=InitInv


forall(t in Toverall) do
s_o(t)<=Inv(t)
s_o(t) <= G_o			
s_o(t)>=0
end-do

forall(t in Toverall) do
s_i(t) <= C - Inv(t) + s_o(t)
s_i(t) <= G_i			
s_i(t)>=0
end-do

forall(t in T)do
ct1a(t) := indicator(-1, q(t), P(t) - p_i(t) <= q(t))					
ct1b(t) := indicator(1, q(t), P(t) - p_i(t) >= q(t)-1 + 0.0001)	    	
end-do
forall(t in Tforward)do 
ct1c(t) := indicator(-1, q(t), P(t) - f_i(t) <= q(t))					
ct1d(t) := indicator(1, q(t), P(t) - f_i(t) >= q(t)-1 + 0.0001)	    	
end-do

forall(t in T)do
ct2a(t) := indicator(-1, r(t), P(t) + r(t) - 0.0001 >= p_o(t))			
ct2b(t) := indicator(1, r(t), P(t) - 1 + r(t) <= p_o(t))				
end-do
forall(t in Tforward)do
ct2c(t) := indicator(-1, r(t), P(t) + r(t) - 0.0001 >= f_o(t))			
ct2d(t) := indicator(1, r(t), P(t) - 1 + r(t) <= f_o(t))				
end-do

forall(t in Toverall)do
s_i(t)<=C*q(t)
end-do

forall(t in Toverall)do
s_i(t)>=C-Inv(t) - C*(1-q(t))
end-do

forall(t in Toverall)do
s_o(t)<=C*(r(t))
end-do

forall(t in Toverall)do
s_o(t)>=Inv(t) - C*(1-r(t))
end-do

forall(t in Toverall,i in N)do
s_i(t) is_free
s_o(t) is_free
Inv(t) is_free
beta(i) is_free
P(t) is_free
q(t) is_binary
r(t) is_binary
end-do

forall(t in Toverall)do
P(t) = sum(i in N)(beta(i)*X(i,t))
end-do

forall(i in N)
indicator(-1, w(i), beta(i) <= 0)		
forall(i in N)
indicator(-1, w(i), beta(i) >= 0)		

forall(i in N)do
w(i) is_binary
end-do

!Objective
maximize (1/(Tmax-Tmin+1)*(sum(t in T)(p_o(t)*s_o(t)-p_i(t)*s_i(t)-c_h*Inv(t)))+1/(TmaxForward-Tmax)*(sum(t in Tmax+1..TmaxForward)(f_o(t)*s_o(t)-f_i(t)*s_i(t)-c_h*Inv(t)))-lambda*(sum(i in 2..Nmax)w(i)))  

!Write to Database
forall(t in Toverall) sol_s_i(t) := getsol(s_i(t))
forall(t in Toverall) sol_s_o(t) := getsol(s_o(t))
forall(t in Toverall) sol_Inv(t) := getsol(Inv(t))
forall(i in N) 		  sol_beta(i) := getsol(beta(i))
forall(t in Toverall) sol_q(t) := getsol(q(t))
forall(t in Toverall) sol_r(t) := getsol(r(t))
forall(t in Toverall) sol_P(t) := getsol(P(t))

objValue := getobjval

Profit := getsol(1/(Tmax-Tmin+1)*(sum(t in T)(p_o(t)*s_o(t)-p_i(t)*s_i(t)-c_h*Inv(t))))

initializations to !Datbase
Profit as !...	
sol_Inv as !...
sol_s_i as !...
sol_s_o as !...
sol_beta as !...

end-model

model DDA_SEQ_1 ! 1 Period look-ahead
uses "mmxprs", "mmsheet"; 

parameters
Period=1	
end-parameters


setparam("XPRS_MIPRELSTOP",1e-8)
setparam("XPRS_MAXTIME",1000)

declarations
	
!Sets
Tau: set of integer 

!Parameters
Tmax: integer
Tau_min: integer
Tau_max: integer
f_t:   array(Tau) of real 		
f_i_t: array(Tau) of real		
f_o_t: array(Tau) of real		
C: real							
InitInv: real					
c_h: real						
c_i: real						
c_o: real						
eta_i: real						
eta_o: real						
G_i: real						
G_o: real						
ForecastHorizon: integer		

s_i: 	array(Tau) of mpvar		
s_o: 	array(Tau) of mpvar		
Inv:	array(Tau) of mpvar		

!Constraint Labels
ct1a: array(Tau) of logctr
ct2a: array(Tau) of logctr
ct3a: array(Tau) of logctr
ct1b: array(Tau) of logctr
ct2b: array(Tau) of logctr
ct3b: array(Tau) of logctr

!Solution Values
sol_s_i_Period1: 	real
sol_s_o_Period1: 	real
objValue: 			real
end-declarations

initializations from !Database
Tmax as !...
end-initializations	

if(Period<Tmax)then
initializations from !Database
ForecastHorizon as !...
end-initializations
end-if
if(Period=Tmax)then
ForecastHorizon:=0
end-if
	
Tau_min:=1
Tau_max:=Tau_min+ForecastHorizon	

initializations from !Database	
Tau as !...
f_t as !...
C as !...
InitInv as !...
c_h as !...
c_i as !...
c_o as !...
eta_i as !...	
eta_o as !...
G_i as !...
G_o as !...
end-initializations

!Friction adjustment
forall(tau in Tau)do
f_i_t(tau):=1/eta_i * f_t(tau) + c_i
f_o_t(tau):=eta_o * f_t(tau) - c_o
end-do


!Initialize Arrays
forall(tau in Tau) create(s_i(tau))
forall(tau in Tau) create(s_o(tau))
forall(tau in Tau) create(Inv(tau))

!Constraints
forall(tau in 1..Tau_max|tau<Tau_max)do
Inv(tau+1)=Inv(tau)-s_o(tau)+s_i(tau)
end-do
Inv(1)=InitInv

forall(tau in Tau) do
s_o(tau)<=Inv(tau)
s_o(tau)>=0
s_o(tau)<=G_o
end-do

forall(tau in Tau) do
s_i(tau)<=C-Inv(tau)+s_o(tau)
s_i(tau)>=0
s_i(tau)<=G_i
end-do

forall(tau in Tau)do
s_i(tau) is_free
s_o(tau) is_free
Inv(tau) is_free
end-do

!Objective
maximize ((sum(tau in Tau)(f_o_t(tau)*s_o(tau)-f_i_t(tau)*s_i(tau)-c_h*Inv(tau))))

!Write to Excel
sol_s_i_Period1 := getsol(s_i(1))
sol_s_o_Period1 := getsol(s_o(1))

objValue := getobjval

initializations to !Database
sol_s_i_Period1 as !...
sol_s_o_Period1 as !...
end-initializations

end-model
